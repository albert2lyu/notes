#+TITLE Debug Kernel With kgtp on android

* Kernel Building
#+BEGIN_SRC bash
 General setup  ---> 
     [ * ] Prompt for development and/or incomplete code/drivers
Kernel hacking  --->
     [ * ] Compile the kernel with debug info
     [ * ] Compile the kernel with frame pointers
     [ * ] KGDB: kernel debugger  --->
           < * >   KGDB: use kgdb over the serial console
#+END_SRC


* Android
#+BEGIN_SRC bash
#Open the KGTP interface in current machine.
su
cd /system/vendor/lib
insmod gtp.ko
nc -l -p 1234 </sys/kernel/debug/gtp >/sys/kernel/debug/gtp
#+END_SRC


* PC
#+BEGIN_SRC bash
sudo gdb-release ./vmlinux
(gdb) set gnutarget elf32-littlearm
(gdb) file /mnt/ubuntu32/work/vc1000/src/kernel-vc1000-2.3/vmlinux
(gdb) set debug remote 1
(gdb) target remote 192.168.2.213:1234
(gdb) trace vfs_readdir
Tracepoint 1 at 0xc02289f0: file /build/buildd/linux-2.6.35/fs/readdir.c, line 23.
(gdb) actions 
Enter actions for tracepoint 1, one per line.
End with a line saying just "end".
>collect $reg
>end
(gdb) tstart 
(gdb) shell ls
vmlinux-2.6.35-30-generic
(gdb) tstop 
(gdb) tfind 
Found trace frame 0, tracepoint 1
#0  vfs_readdir (file=0x0, filler=0x163d8ae3, buf=0x18c0) at /build/buildd/linux-2.6.35/fs/readdir.c:23
23      {
#+END_SRC


* 参考
    * [[http://code.google.com/p/kgtp/][kgtp Linux Kernel GDB Tracepoint module]]    
    * [[http://code.google.com/p/kgtp/wiki/Quickstart][kgtp Quick start]]
    * [[http://code.google.com/p/kgtp/wiki/HOWTO][kgtp How to]]
    * [[http://sourceware.org/gdb/onlinedocs/gdb/Tracepoints.html#Tracepoints][GDB Tracepoints]]


